{"version":3,"sources":["../../src/script/script.js"],"names":["vm","Vue","el","data","count","methods","countUp","changeRotateSpeed","vm_stop","hsStop","Speed_0","howManySpinners","scene","THREE","Scene","box","controls","renderer","camera","model","model2","model3","rotate_speed","r_radian","c_radian","geometry","material","renderSpinner","light","ambient","gridHelper","axisHelper","lightHelp","width","height","modelPath","DirectionalLight","position","set","add","AmbientLight","PerspectiveCamera","lookAt","OrbitControls","autoRotate","autoRotateSpeed","WebGLRenderer","antialias","setSize","setClearColor","setPixelRatio","window","devicePixelRatio","document","getElementById","appendChild","domElement","loader","ColladaLoader","load","collada","cModel","scale","console","log","i","clone","randX","Math","random","randY","randZ","randColor","render","addSpinner","phongMat","MeshPhongMaterial","Mesh","size","color","Color","requestAnimationFrame","update","addEventListener"],"mappings":"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","file":"script.js","sourcesContent":["var vm = new Vue({\n  el: '#mycounter',\n  data: {\n    count: 0\n  },\n  methods: {\n    countUp: function() {\n            this.count++;\n            changeRotateSpeed ();\n      }\n  }\n});\n\nvar vm_stop = new Vue({\n  el: '#mystop',\n  methods: {\n    hsStop: function() {\n            Speed_0();\n    }\n  }\n});\n\nlet howManySpinners = 200;\nlet scene = new THREE.Scene();\nlet box;\nlet controls;\nlet renderer;\nlet camera;\nlet model = [];\n//let model = {};\nlet model2 = {};\nlet model3 = {};\nlet rotate_speed = 0.05;\nlet r_radian = 0;\nlet c_radian = 0;\nlet geometry;\nlet material;\n\nfunction renderSpinner () {\n  'use strict';\n  let light;\n  let ambient;\n  let gridHelper;\n\tlet axisHelper;\n  let lightHelp;\n  let width = 1200;\n  let height = 1200;\n\tlet modelPath ;\n\n   //light\n  light = new THREE.DirectionalLight(0xffffff, 1);\n  light.position.set(0, 200, 80);\n  scene.add(light);\n  ambient = new THREE.AmbientLight(0x404040);\n  scene.add(ambient);\n\n\t//camera\n  camera = new THREE.PerspectiveCamera(45, width /　height, 1 , 1000);\n  camera.position.set(0, 400, 300);\n  camera.lookAt(scene.position);\n\n  // helper 現在は非表示\n  //gridHelper = new THREE.GridHelper(200, 50);\n  //scene.add(gridHelper);\n  //axisHelper = new THREE.AxisHelper(1000);\n  //scene.add(axisHelper);\n  //lightHelper = new THREE.DirectionalLightHelper(light , 20)\n  //scene.add(lightHelper);\n\n  //controls\n  controls = new THREE.OrbitControls(camera);\n  //cameraの自動回転\n  controls.autoRotate = true;\n  controls.autoRotateSpeed = 1.5;\n\n  // renderer\n  renderer = new THREE.WebGLRenderer({ antialias: true });\n  renderer.setSize(width, height);\n  renderer.setClearColor(0xffffff);\n  renderer.setPixelRatio(window.devicePixelRatio);\n  document.getElementById('stage').appendChild(renderer.domElement);\n\n\t//modelPath = 'src/bear.json';\n\t//modelPath = 'src/handspiner_3d.json';\n  //modelPath = '../src/data/handspiner_3d_geo.json';\n  modelPath = './public/assets/glass_spiral_light_fitting.dae';\n  // modelPath = './public/assets/elf/elf.dae';\n\t//modelPath = '/Users/yoshimurahiroyuki/workspace/threejs/src/handspiner.json';\n\n  // let loader = new THREE.JSONLoader();　\n\n\tconst loader = new THREE.ColladaLoader();\n\tloader.load(modelPath, (collada) => {\n\t  // 読み込み後に3D空間に追加\n\t  const cModel = collada.scene;\n\t\tcModel.scale.set(0.07,0.07,0.07)\n\t\t// console.log(model);\n\t\t // model.mscale.set(1000, 1000, 1000);\n\n\t\t console.log(cModel);\n\t\tfor (let i=0; i < howManySpinners; i++ ) {\n       // let phongMat = new THREE.MeshPhongMaterial(mat);\n\n      model[i] = cModel.clone();\n\n \t\t\tlet randX = 600 * Math.random()-300;\n \t\t\tlet randY = 600 * Math.random()-300;\n \t\t\tlet randZ = 400 * Math.random()-200;\n\n      if (i==0) {\n \t\t\t\tmodel[i].position.set(0, 20, 0);\n \t\t\t} else {\n \t\t\t\tmodel[i].position.set(randX, randY, randZ);\n \t\t\t}　　\n\n     \t// model[i].scale.set(0.5, 0.5, 0.5);　\n     \tlet randColor = Math.random() * 0xffffff ;　　　\n     \t// model[i].material.color = new THREE.Color(randColor);\n     \tscene.add(model[i]);\n \t\t}\n\n\t});\n\trender();\n\n}\n\n//\n//   loader.load(modelPath, function(geo, mat) {　　　\n//     //let phongMat = new THREE.MeshPhongMaterial(mat);\n//     //let phongMat2 = new THREE.MeshPhongMaterial(mat);\n//     //let phongMat3 = new THREE.MeshPhongMaterial(mat);\n//     //for (let mt of faceMat.materials) {\n//     //  mt.color = new THREE.Color(0xffcc88);\n//   \t//}\n//     geometry = geo;\n//     material = mat;\n//\n\n//     render();\n//   });　\n// }\n\nfunction addSpinner () {\n  let phongMat = new THREE.MeshPhongMaterial(material);\n  model = new THREE.Mesh(geometry, phongMat);\n\tlet randX = 800 * Math.random();\n\tlet randY = 800 * Math.random();\n\tlet randZ = 800 * Math.random();\n\n  let size = Math.random();\n\tmodel.scale.set(size, size, size);　　　\n  model.position.set(randX, randY, randZ);\n\tlet randColor = Math.random() * 0xffffff;　　　\n\tmodel.material.color = new THREE.Color(randColor);\n\t camera.position.set(0, 1, 1);\n\tscene.add(model);　\n}\n\nfunction render () {\n\t// console.log(\"coming\");\n\n  requestAnimationFrame(render);\n  r_radian += 0.01;\n\n\n\t// for (let i=0; i < howManySpinners; i++ ) {\n  // \tmodel[i].rotation.y += rotate_speed;\n  //   model[i].position.y += (Math.sin(r_radian) - Math.sin(r_radian-0.01))*150 ;\n\t// \tconsole.log(\"hoge\");\n\t// }\n\n\t// c_radian += 0.007;\n   // let cameraZ = 150 * (Math.sin(c_radian)) +150;\n // let cameraZ = 0;\n\t // camera.position.set(0, 600, cameraZ);\n\n\n  controls.update();\n  renderer.render(scene, camera);\n}\n//\n// function changeRotateSpeed () {\n//   //controls.autoRotateSpeed = vm.count*10;\n//  \trotate_speed += vm.count*0.01;\n//   for (let i=0 ; i < howManySpinners; i++) {\n//\n// \t\tmodel[i].rotation.y = 1.8*vm.count;\n//   }\n// }\n//\n// function Speed_0 () {\n//   vm.count = 0;\n//   rotate_speed = 0;\n//  \t//addSpinner();\n// }\n\nwindow.addEventListener('load', renderSpinner);\n\n// renderSpinner();\n"]}